From 498b3b336c50d300c1fe7b56d894613d4ed428f8 Mon Sep 17 00:00:00 2001
From: Chaomin Zheng <chaomin.zheng@amlogic.com>
Date: Sat, 15 Dec 2018 16:45:35 +0800
Subject: [PATCH] TvInputHardawreManager: use listAudioPorts replace
 listAudioDevicePorts [1/1]

PD# SWPL-1987

Problem:
droid launcher tv preview audio patch not right

Solution:
TvInputHardawreManager use listAudioPorts replace listAudioDevicePorts

Verify:
verify by p321

Change-Id: I1e7b619eb0f5fa1cc985fab5fd17459c1bc16701
Signed-off-by: Chaomin Zheng <chaomin.zheng@amlogic.com>
---
 .../android/server/tv/TvInputHardwareManager.java  | 48 ++++++++++++++--------
 1 file changed, 31 insertions(+), 17 deletions(-)

diff --git a/services/core/java/com/android/server/tv/TvInputHardwareManager.java b/services/core/java/com/android/server/tv/TvInputHardwareManager.java
index 17a3bd8..99995d0 100644
--- a/services/core/java/com/android/server/tv/TvInputHardwareManager.java
+++ b/services/core/java/com/android/server/tv/TvInputHardwareManager.java
@@ -793,15 +793,20 @@ class TvInputHardwareManager implements TvInputHal.Callback {
 
         private void findAudioSinkFromAudioPolicy(List<AudioDevicePort> sinks) {
             sinks.clear();
-            ArrayList<AudioDevicePort> devicePorts = new ArrayList<>();
-            if (mAudioManager.listAudioDevicePorts(devicePorts) != AudioManager.SUCCESS) {
+            ArrayList<AudioPort> audioPorts = new ArrayList<>();
+            int[] portGeneration = new int[1];
+            if (AudioSystem.listAudioPorts(audioPorts, portGeneration) != AudioManager.SUCCESS) {
                 return;
             }
             int sinkDevice = mAudioManager.getDevicesForStream(AudioManager.STREAM_MUSIC);
-            for (AudioDevicePort port : devicePorts) {
-                if ((port.type() & sinkDevice) != 0 &&
-                    (port.type() & AudioSystem.DEVICE_BIT_IN) == 0) {
-                    sinks.add(port);
+            AudioDevicePort port;
+            for (AudioPort audioPort : audioPorts) {
+                if (audioPort instanceof AudioDevicePort) {
+                    port = (AudioDevicePort)audioPort;
+                    if ((port.type() & sinkDevice) != 0 &&
+                            (port.type() & AudioSystem.DEVICE_BIT_IN) == 0) {
+                        sinks.add(port);
+                    }
                 }
             }
         }
@@ -810,13 +815,18 @@ class TvInputHardwareManager implements TvInputHal.Callback {
             if (type == AudioManager.DEVICE_NONE) {
                 return null;
             }
-            ArrayList<AudioDevicePort> devicePorts = new ArrayList<>();
-            if (mAudioManager.listAudioDevicePorts(devicePorts) != AudioManager.SUCCESS) {
+            ArrayList<AudioPort> audioPorts = new ArrayList<>();
+            int[] portGeneration = new int[1];
+            if (AudioSystem.listAudioPorts(audioPorts, portGeneration) != AudioManager.SUCCESS) {
                 return null;
             }
-            for (AudioDevicePort port : devicePorts) {
-                if (port.type() == type && port.address().equals(address)) {
-                    return port;
+            AudioDevicePort port;
+            for (AudioPort audioPort : audioPorts) {
+                if (audioPort instanceof AudioDevicePort) {
+                    port = (AudioDevicePort)audioPort;
+                    if (port.type() == type && port.address().equals(address)) {
+                        return port;
+                    }
                 }
             }
             return null;
@@ -1296,14 +1306,18 @@ class TvInputHardwareManager implements TvInputHal.Callback {
         IHdmiSystemAudioModeChangeListener.Stub {
         @Override
         public void onStatusChanged(boolean enabled) throws RemoteException {
-            synchronized (mLock) {
-                for (int i = 0; i < mConnections.size(); ++i) {
-                    TvInputHardwareImpl impl = mConnections.valueAt(i).getHardwareImplLocked();
-                    if (impl != null) {
-                        impl.handleAudioSinkUpdated();
+            mHandler.postDelayed(new Runnable() {
+                public void run() {
+                    synchronized (mLock) {
+                        for (int i = 0; i < mConnections.size(); ++i) {
+                            TvInputHardwareImpl impl = mConnections.valueAt(i).getHardwareImplLocked();
+                            if (impl != null) {
+                                impl.handleAudioSinkUpdated();
+                            }
+                        }
                     }
                 }
-            }
+            }, enabled ? 0 : 500);
         }
     }
 }
-- 
2.7.4

